<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns:m="http://schemas.microsoft.com/office/2004/12/omml" xmlns="http://www.w3.org/TR/REC-html40"><head><title>Code Analyzer</title></head><body lang="EN-US">
<div style="text-align: center;"><span style="font-weight: bold;"> Programming Languages</span> <br> <b>John W. Coffey</b></div>
<div style="text-align: center;"><b>Programming project # 1</b></div>
<div style="text-align: center;"><b>Recursive-descent Parser</b></div>
<p></p>
<p><b>Project Description</b></p>
<p>You will implement this program in the <i>C programming language</i>. Your program must compile using <b>gcc</b>&nbsp;from a makefile in the <b>Multiplatform lab</b>.
Your program will implement the pseudocode described in class. Your
application will take one command-line argument, the name of the file
to be checked. The file will contain a number of assignment statements.
The statements will be terminated with semicolons (;). Furthermore,
your group of assignment statements must be delimited by the <span style="font-family: 'Courier New';">"begin<span class="GramE">"<span style="font-family: 'Times New Roman',serif;"> &nbsp;and</span></span></span> <span style="font-family: 'Courier New';">"end"</span>
reserved words. The intent is that legal programs will be free format,
meaning that indentations do not matter, multiple statements are
permitted on a line<span class="GramE">, &nbsp;a</span> statement may
appear on multiple lines (with no continuation character). Finally,
your program must include a capability to provide comments. Comments
will be on a single line and they will start with a <span class="SpellE">tilda</span>:</p>
<p><span style="font-family: 'courier new',courier,sans-serif;">~ <span class="GramE">this</span> is a comment</span></p>
<p>You will parse the statements, keeping track of where you are in the
string, and report whether or not the input program is legal. Your
program will report either</p>
<p>- The program is legal. <br> - Line <span style="font-family: 'Courier New';">&lt;integer&gt;</span> contains error <tt><span style="font-size: 10pt;">&lt;<span class="SpellE">errormsg</span>&gt;</span></tt> (missing ']', missing ')', expected assignment operator, expected operator, <span class="SpellE">etc</span>)</p>
<p class="MsoNormal"><span>If all statements are legal, you must report
all the identifiers that were used. Therefore, you will need at symbol
table. Your symboltable must be implemented as an externally chained
hashTable. If&nbsp;the program is illegal, you do not need to list the
identifiers.<o:p></o:p></span></p>
<p>You will implement both a lexical analyzer and a parser. These are
clearly different functions and they should be implemented in different
physical files. The lexical analyzer will simply decide what comes next
in the token stream and return it. The parser will decide if the token
is OK at that spot.</p>
<p>In your program, you will need to have an</p>
<p>&nbsp;&nbsp; <span style="font-family: 'Courier New';">&nbsp;<span class="SpellE"><span class="GramE">int</span></span> <span class="SpellE">lookahead</span>; </span></p>
<p><span class="GramE">that</span> always holds the next token.</p>
<p><b>The structure of </b><tt><b><span style="font-size: 13.5pt;">Number</span></b></tt><b> and </b><tt><b><span style="font-size: 13.5pt;">Identifier</span></b></tt></p>
<p>You should detect whether or not a character string comprises an integer&nbsp;or a real number.</p>
<p style="margin: 0in 0in 0.0001pt;">These are valid numbers: <br> <tt><span style="font-size: 10pt;">&nbsp;&nbsp;&nbsp;&nbsp; 123, 1234567, 45.6789, </span></tt><span class="SpellE">etc ...</span> <br> &nbsp;</p>
<p style="margin: 0in 0in 0.0001pt;">A legal <tt><span style="font-size: 10pt;">&lt;identifier&gt;</span></tt> will start with a letter followed by combinations of letters, numbers, and underscores, subject to the following two rules:</p>
<p style="margin: 0in 0in 0.0001pt;">&nbsp;</p>
<p style="margin: 0in 0in 0.0001pt;">1. You cannot have consecutive underscores</p>
<p style="margin: 0in 0in 0.0001pt;">2. An identifier cannot end with an underscore.</p>
<p>These are valid identifiers: <br> &nbsp;&nbsp;&nbsp;<tt><span style="font-size: 10pt;">&nbsp;&nbsp; e123, e, qwert5yuio, a_b_7</span></tt></p>
<p>These are not:</p>
<p>&nbsp;&nbsp;<span style="font-family: 'Courier New';">&nbsp;&nbsp;&nbsp; e__7, <span class="SpellE">abc</span>_,<span class="GramE">&nbsp; 7yght</span>, _<span class="SpellE">iuh</span></span></p>
<p><span class="GramE"><b>Typical &nbsp;Statements</b></span><b> (legal and illegal)</b></p>
<blockquote style="margin-top: 5pt; margin-bottom: 5pt;">
<p><tt><span style="font-size: 10pt;">a = b;</span></tt><span style="font-size: 10pt; font-family: 'Courier New';"><br> <tt>a=<span class="SpellE">af</span>+=</tt><br> <tt>a=;</tt><br> <tt>a_5 = 2;</tt><br> <tt>6 = j;</tt><br> <tt>a=d*</tt><br> <tt>dd5=((3+5*8);</tt><br> <tt>%iii=0</tt><br> <tt>a=b2-(((xyz + 99.999)* <span class="SpellE">abc</span>)*d);</tt><br> </span><span style="font-family: 'Courier New';">qwerty=((6 - <span class="SpellE">abcd</span>)*(a + b));<br> </span>&nbsp;<span class="GramE"><span style="font-family: 'Courier New';">xyz</span></span><span style="font-family: 'Courier New';"> = (9*8*7*6)/(<span class="SpellE">a+b+c</span>);</span></p>
</blockquote>
<p><b>A legal program</b></p>
<pre>~ a typical, minimal legal program<br>begin<br>  qwerty=((6 - abcd)*(a + b));<br>&nbsp;&nbsp;xyz = (9*8*7.9876*6)/(a+b+c);<br>end</pre>
<p><b></b></p>
<p><b>Deliverables</b></p>
<p>1. A design document "FunctionalDecomposition.docx"<br> 2. A User's Manual "UsersManual.docx"<br> 3. Your source code<br> 4. A <span style="font-family: Courier New,Courier,monospace;">makefile</span><br>5. Four (4) legal programs of increasing complexity; four (4) illegal programs of increasing complexity.<br>6. A script (run) to execute all your programs (legal and illegal)<br> <br> <b>Submission: </b><span style="font-weight: bold;">&nbsp;</span> <br><br>1.
Compile and run your program one last time before submitting it. Your
program must run in the multi-platform lab.<br>
2. The name of your program file should be: your last name, a dash (-),
your first initial, another dash, the letter 'p', the project number,
followed by the .cpp extension. For example, if your name is John
Coffey, and you are submitting project 1, your file should be called
coffey-j-p1.cpp.<br>
3. Login to UWF's Canvas system. Select our course.<br>
4. Go to the appropriate assignment, choose your program file and click the "Upload Assignment" button.<br>
5. Upload your file. Check to insure that the file was uploaded.<br>
6. Be sure to review the university policy on academic dishonesty. This is an individual project.<br>
</p><p>Please review the policy on ACADEMIC MISCONDUCT. This is an <i>individual assignment.</i></p>
<p>&nbsp; <br> &nbsp; <br> &nbsp; <br> &nbsp;</p>
</body></html>